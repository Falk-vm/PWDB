{"message":"no method named `default` found for fn item `fn(i32, i32, i32, i32, _) -> DoubleWindow {<DoubleWindow as fltk::prelude::WidgetBase>::new::<_>}` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":227,"byte_end":238,"line_start":9,"line_end":9,"column_start":20,"column_end":31,"is_primary":false,"text":[{"text":"    let mut wind = Window::new.default().with_size(400, 300).with_label(\"Password generator\");","highlight_start":20,"highlight_end":31}],"label":"this is a function, perhaps you wish to call it","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":239,"byte_end":246,"line_start":9,"line_end":9,"column_start":32,"column_end":39,"is_primary":true,"text":[{"text":"    let mut wind = Window::new.default().with_size(400, 300).with_label(\"Password generator\");","highlight_start":32,"highlight_end":39}],"label":"this is an associated function, not a method","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"found the following associated functions; to be used as methods, functions must have a `self` parameter","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the candidate is defined in the trait `std::default::Default`","code":null,"level":"note","spans":[{"file_name":"/rustc/a55dd71d5fb0ec5a6a3a9e8c27b2127ba491ce52\\library\\core\\src\\default.rs","byte_start":3226,"byte_end":3247,"line_start":133,"line_end":133,"column_start":5,"column_end":26,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"use associated function syntax instead","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":227,"byte_end":246,"line_start":9,"line_end":9,"column_start":20,"column_end":39,"is_primary":true,"text":[{"text":"    let mut wind = Window::new.default().with_size(400, 300).with_label(\"Password generator\");","highlight_start":20,"highlight_end":39}],"label":null,"suggested_replacement":"fn(i32, i32, i32, i32, _) -> DoubleWindow {<DoubleWindow as fltk::prelude::WidgetBase>::new::<_>}::default","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null},{"message":"disambiguate the associated function for the candidate","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":227,"byte_end":248,"line_start":9,"line_end":9,"column_start":20,"column_end":41,"is_primary":true,"text":[{"text":"    let mut wind = Window::new.default().with_size(400, 300).with_label(\"Password generator\");","highlight_start":20,"highlight_end":41}],"label":null,"suggested_replacement":"<fn(i32, i32, i32, i32, _) -> DoubleWindow {<DoubleWindow as fltk::prelude::WidgetBase>::new::<_>} as std::default::Default>::default(Window::new)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `default` found for fn item `fn(i32, i32, i32, i32, _) -> DoubleWindow {<DoubleWindow as fltk::prelude::WidgetBase>::new::<_>}` in the current scope\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:9:32\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut wind = Window::new.default().with_size(400, 300).with_label(\"Password generator\");\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthis is an associated function, not a method\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis is a function, perhaps you wish to call it\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: found the following associated functions; to be used as methods, functions must have a `self` parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the candidate is defined in the trait `std::default::Default`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use associated function syntax instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    let mut wind = \u001b[0m\u001b[0m\u001b[38;5;10mfn(i32, i32, i32, i32, _) -> DoubleWindow {<DoubleWindow as fltk::prelude::WidgetBase>::new::<_>}::default\u001b[0m\u001b[0m().with_size(400, 300).with_label(\"Password generator\");\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: disambiguate the associated function for the candidate\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    let mut wind = \u001b[0m\u001b[0m\u001b[38;5;10m<fn(i32, i32, i32, i32, _) -> DoubleWindow {<DoubleWindow as fltk::prelude::WidgetBase>::new::<_>} as std::default::Default>::default(Window::new)\u001b[0m\u001b[0m.with_size(400, 300).with_label(\"Password generator\");\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0599`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0599`.\u001b[0m\n"}
